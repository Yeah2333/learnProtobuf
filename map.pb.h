// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto;
namespace map {
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointType;
class PointTypeDefaultTypeInternal;
extern PointTypeDefaultTypeInternal _PointType_default_instance_;
class childMap_t;
class childMap_tDefaultTypeInternal;
extern childMap_tDefaultTypeInternal _childMap_t_default_instance_;
class fdata4;
class fdata4DefaultTypeInternal;
extern fdata4DefaultTypeInternal _fdata4_default_instance_;
class grid_t;
class grid_tDefaultTypeInternal;
extern grid_tDefaultTypeInternal _grid_t_default_instance_;
class mapArray;
class mapArrayDefaultTypeInternal;
extern mapArrayDefaultTypeInternal _mapArray_default_instance_;
class mapCell_t;
class mapCell_tDefaultTypeInternal;
extern mapCell_tDefaultTypeInternal _mapCell_t_default_instance_;
class mapCell_t_1;
class mapCell_t_1DefaultTypeInternal;
extern mapCell_t_1DefaultTypeInternal _mapCell_t_1_default_instance_;
class mapCell_t_2;
class mapCell_t_2DefaultTypeInternal;
extern mapCell_t_2DefaultTypeInternal _mapCell_t_2_default_instance_;
}  // namespace map
PROTOBUF_NAMESPACE_OPEN
template<> ::map::PointCloud* Arena::CreateMaybeMessage<::map::PointCloud>(Arena*);
template<> ::map::PointType* Arena::CreateMaybeMessage<::map::PointType>(Arena*);
template<> ::map::childMap_t* Arena::CreateMaybeMessage<::map::childMap_t>(Arena*);
template<> ::map::fdata4* Arena::CreateMaybeMessage<::map::fdata4>(Arena*);
template<> ::map::grid_t* Arena::CreateMaybeMessage<::map::grid_t>(Arena*);
template<> ::map::mapArray* Arena::CreateMaybeMessage<::map::mapArray>(Arena*);
template<> ::map::mapCell_t* Arena::CreateMaybeMessage<::map::mapCell_t>(Arena*);
template<> ::map::mapCell_t_1* Arena::CreateMaybeMessage<::map::mapCell_t_1>(Arena*);
template<> ::map::mapCell_t_2* Arena::CreateMaybeMessage<::map::mapCell_t_2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace map {

// ===================================================================

class fdata4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.fdata4) */ {
 public:
  fdata4();
  virtual ~fdata4();

  fdata4(const fdata4& from);
  fdata4(fdata4&& from) noexcept
    : fdata4() {
    *this = ::std::move(from);
  }

  inline fdata4& operator=(const fdata4& from) {
    CopyFrom(from);
    return *this;
  }
  inline fdata4& operator=(fdata4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fdata4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fdata4* internal_default_instance() {
    return reinterpret_cast<const fdata4*>(
               &_fdata4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(fdata4& a, fdata4& b) {
    a.Swap(&b);
  }
  inline void Swap(fdata4* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fdata4* New() const final {
    return CreateMaybeMessage<fdata4>(nullptr);
  }

  fdata4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fdata4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fdata4& from);
  void MergeFrom(const fdata4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fdata4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.fdata4";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kData1FieldNumber = 1,
    kData2FieldNumber = 2,
    kData3FieldNumber = 3,
    kData4FieldNumber = 4,
  };
  // float data1 = 1;
  void clear_data1();
  float data1() const;
  void set_data1(float value);
  private:
  float _internal_data1() const;
  void _internal_set_data1(float value);
  public:

  // float data2 = 2;
  void clear_data2();
  float data2() const;
  void set_data2(float value);
  private:
  float _internal_data2() const;
  void _internal_set_data2(float value);
  public:

  // float data3 = 3;
  void clear_data3();
  float data3() const;
  void set_data3(float value);
  private:
  float _internal_data3() const;
  void _internal_set_data3(float value);
  public:

  // float data4 = 4;
  void clear_data4();
  float data4() const;
  void set_data4(float value);
  private:
  float _internal_data4() const;
  void _internal_set_data4(float value);
  public:

  // @@protoc_insertion_point(class_scope:map.fdata4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float data1_;
  float data2_;
  float data3_;
  float data4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PointType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.PointType) */ {
 public:
  PointType();
  virtual ~PointType();

  PointType(const PointType& from);
  PointType(PointType&& from) noexcept
    : PointType() {
    *this = ::std::move(from);
  }

  inline PointType& operator=(const PointType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointType& operator=(PointType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointType* internal_default_instance() {
    return reinterpret_cast<const PointType*>(
               &_PointType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointType& a, PointType& b) {
    a.Swap(&b);
  }
  inline void Swap(PointType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointType* New() const final {
    return CreateMaybeMessage<PointType>(nullptr);
  }

  PointType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointType& from);
  void MergeFrom(const PointType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.PointType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kIntensityFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float intensity = 4;
  void clear_intensity();
  float intensity() const;
  void set_intensity(float value);
  private:
  float _internal_intensity() const;
  void _internal_set_intensity(float value);
  public:

  // @@protoc_insertion_point(class_scope:map.PointType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float intensity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class PointCloud :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.PointCloud) */ {
 public:
  PointCloud();
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(nullptr);
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.PointCloud";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .map.PointType point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::map::PointType* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::PointType >*
      mutable_point();
  private:
  const ::map::PointType& _internal_point(int index) const;
  ::map::PointType* _internal_add_point();
  public:
  const ::map::PointType& point(int index) const;
  ::map::PointType* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::PointType >&
      point() const;

  // @@protoc_insertion_point(class_scope:map.PointCloud)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::PointType > point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class grid_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.grid_t) */ {
 public:
  grid_t();
  virtual ~grid_t();

  grid_t(const grid_t& from);
  grid_t(grid_t&& from) noexcept
    : grid_t() {
    *this = ::std::move(from);
  }

  inline grid_t& operator=(const grid_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline grid_t& operator=(grid_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const grid_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const grid_t* internal_default_instance() {
    return reinterpret_cast<const grid_t*>(
               &_grid_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(grid_t& a, grid_t& b) {
    a.Swap(&b);
  }
  inline void Swap(grid_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline grid_t* New() const final {
    return CreateMaybeMessage<grid_t>(nullptr);
  }

  grid_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<grid_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const grid_t& from);
  void MergeFrom(const grid_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(grid_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.grid_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIDFieldNumber = 1,
    kCubeXFieldNumber = 2,
    kCubeYFieldNumber = 3,
    kGridXFieldNumber = 4,
    kGridYFieldNumber = 5,
    kGridIndexFieldNumber = 6,
  };
  // int32 mapID = 1;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::int32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cubeX = 2;
  void clear_cubex();
  ::PROTOBUF_NAMESPACE_ID::int32 cubex() const;
  void set_cubex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cubex() const;
  void _internal_set_cubex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cubeY = 3;
  void clear_cubey();
  ::PROTOBUF_NAMESPACE_ID::int32 cubey() const;
  void set_cubey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cubey() const;
  void _internal_set_cubey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gridX = 4;
  void clear_gridx();
  ::PROTOBUF_NAMESPACE_ID::int32 gridx() const;
  void set_gridx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gridx() const;
  void _internal_set_gridx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gridY = 5;
  void clear_gridy();
  ::PROTOBUF_NAMESPACE_ID::int32 gridy() const;
  void set_gridy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gridy() const;
  void _internal_set_gridy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gridIndex = 6;
  void clear_gridindex();
  ::PROTOBUF_NAMESPACE_ID::int32 gridindex() const;
  void set_gridindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gridindex() const;
  void _internal_set_gridindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:map.grid_t)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cubex_;
  ::PROTOBUF_NAMESPACE_ID::int32 cubey_;
  ::PROTOBUF_NAMESPACE_ID::int32 gridx_;
  ::PROTOBUF_NAMESPACE_ID::int32 gridy_;
  ::PROTOBUF_NAMESPACE_ID::int32 gridindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class mapCell_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.mapCell_t) */ {
 public:
  mapCell_t();
  virtual ~mapCell_t();

  mapCell_t(const mapCell_t& from);
  mapCell_t(mapCell_t&& from) noexcept
    : mapCell_t() {
    *this = ::std::move(from);
  }

  inline mapCell_t& operator=(const mapCell_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline mapCell_t& operator=(mapCell_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mapCell_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mapCell_t* internal_default_instance() {
    return reinterpret_cast<const mapCell_t*>(
               &_mapCell_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(mapCell_t& a, mapCell_t& b) {
    a.Swap(&b);
  }
  inline void Swap(mapCell_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mapCell_t* New() const final {
    return CreateMaybeMessage<mapCell_t>(nullptr);
  }

  mapCell_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mapCell_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mapCell_t& from);
  void MergeFrom(const mapCell_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mapCell_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.mapCell_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtrXyzFieldNumber = 1,
    kGridFieldNumber = 2,
    kLogOddsFieldNumber = 3,
    kObserveTimesFieldNumber = 4,
    kOccupancyFieldNumber = 5,
    kOccupancyVarFieldNumber = 6,
    kElevationFieldNumber = 7,
    kElevationVarFieldNumber = 8,
  };
  // .map.PointType Ptr_xyz = 1;
  bool has_ptr_xyz() const;
  private:
  bool _internal_has_ptr_xyz() const;
  public:
  void clear_ptr_xyz();
  const ::map::PointType& ptr_xyz() const;
  ::map::PointType* release_ptr_xyz();
  ::map::PointType* mutable_ptr_xyz();
  void set_allocated_ptr_xyz(::map::PointType* ptr_xyz);
  private:
  const ::map::PointType& _internal_ptr_xyz() const;
  ::map::PointType* _internal_mutable_ptr_xyz();
  public:

  // .map.grid_t grid = 2;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::map::grid_t& grid() const;
  ::map::grid_t* release_grid();
  ::map::grid_t* mutable_grid();
  void set_allocated_grid(::map::grid_t* grid);
  private:
  const ::map::grid_t& _internal_grid() const;
  ::map::grid_t* _internal_mutable_grid();
  public:

  // float log_odds = 3;
  void clear_log_odds();
  float log_odds() const;
  void set_log_odds(float value);
  private:
  float _internal_log_odds() const;
  void _internal_set_log_odds(float value);
  public:

  // int32 observeTimes = 4;
  void clear_observetimes();
  ::PROTOBUF_NAMESPACE_ID::int32 observetimes() const;
  void set_observetimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_observetimes() const;
  void _internal_set_observetimes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float occupancy = 5;
  void clear_occupancy();
  float occupancy() const;
  void set_occupancy(float value);
  private:
  float _internal_occupancy() const;
  void _internal_set_occupancy(float value);
  public:

  // float occupancyVar = 6;
  void clear_occupancyvar();
  float occupancyvar() const;
  void set_occupancyvar(float value);
  private:
  float _internal_occupancyvar() const;
  void _internal_set_occupancyvar(float value);
  public:

  // float elevation = 7;
  void clear_elevation();
  float elevation() const;
  void set_elevation(float value);
  private:
  float _internal_elevation() const;
  void _internal_set_elevation(float value);
  public:

  // float elevationVar = 8;
  void clear_elevationvar();
  float elevationvar() const;
  void set_elevationvar(float value);
  private:
  float _internal_elevationvar() const;
  void _internal_set_elevationvar(float value);
  public:

  // @@protoc_insertion_point(class_scope:map.mapCell_t)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::map::PointType* ptr_xyz_;
  ::map::grid_t* grid_;
  float log_odds_;
  ::PROTOBUF_NAMESPACE_ID::int32 observetimes_;
  float occupancy_;
  float occupancyvar_;
  float elevation_;
  float elevationvar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class mapCell_t_1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.mapCell_t_1) */ {
 public:
  mapCell_t_1();
  virtual ~mapCell_t_1();

  mapCell_t_1(const mapCell_t_1& from);
  mapCell_t_1(mapCell_t_1&& from) noexcept
    : mapCell_t_1() {
    *this = ::std::move(from);
  }

  inline mapCell_t_1& operator=(const mapCell_t_1& from) {
    CopyFrom(from);
    return *this;
  }
  inline mapCell_t_1& operator=(mapCell_t_1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mapCell_t_1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mapCell_t_1* internal_default_instance() {
    return reinterpret_cast<const mapCell_t_1*>(
               &_mapCell_t_1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(mapCell_t_1& a, mapCell_t_1& b) {
    a.Swap(&b);
  }
  inline void Swap(mapCell_t_1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mapCell_t_1* New() const final {
    return CreateMaybeMessage<mapCell_t_1>(nullptr);
  }

  mapCell_t_1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mapCell_t_1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mapCell_t_1& from);
  void MergeFrom(const mapCell_t_1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mapCell_t_1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.mapCell_t_1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtrMapCellT1FieldNumber = 1,
  };
  // repeated .map.mapCell_t Ptr_mapCell_t_1 = 1;
  int ptr_mapcell_t_1_size() const;
  private:
  int _internal_ptr_mapcell_t_1_size() const;
  public:
  void clear_ptr_mapcell_t_1();
  ::map::mapCell_t* mutable_ptr_mapcell_t_1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t >*
      mutable_ptr_mapcell_t_1();
  private:
  const ::map::mapCell_t& _internal_ptr_mapcell_t_1(int index) const;
  ::map::mapCell_t* _internal_add_ptr_mapcell_t_1();
  public:
  const ::map::mapCell_t& ptr_mapcell_t_1(int index) const;
  ::map::mapCell_t* add_ptr_mapcell_t_1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t >&
      ptr_mapcell_t_1() const;

  // @@protoc_insertion_point(class_scope:map.mapCell_t_1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t > ptr_mapcell_t_1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class mapCell_t_2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.mapCell_t_2) */ {
 public:
  mapCell_t_2();
  virtual ~mapCell_t_2();

  mapCell_t_2(const mapCell_t_2& from);
  mapCell_t_2(mapCell_t_2&& from) noexcept
    : mapCell_t_2() {
    *this = ::std::move(from);
  }

  inline mapCell_t_2& operator=(const mapCell_t_2& from) {
    CopyFrom(from);
    return *this;
  }
  inline mapCell_t_2& operator=(mapCell_t_2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mapCell_t_2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mapCell_t_2* internal_default_instance() {
    return reinterpret_cast<const mapCell_t_2*>(
               &_mapCell_t_2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(mapCell_t_2& a, mapCell_t_2& b) {
    a.Swap(&b);
  }
  inline void Swap(mapCell_t_2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mapCell_t_2* New() const final {
    return CreateMaybeMessage<mapCell_t_2>(nullptr);
  }

  mapCell_t_2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mapCell_t_2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mapCell_t_2& from);
  void MergeFrom(const mapCell_t_2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mapCell_t_2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.mapCell_t_2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtrMapCellT2FieldNumber = 1,
  };
  // repeated .map.mapCell_t_1 Ptr_mapCell_t_2 = 1;
  int ptr_mapcell_t_2_size() const;
  private:
  int _internal_ptr_mapcell_t_2_size() const;
  public:
  void clear_ptr_mapcell_t_2();
  ::map::mapCell_t_1* mutable_ptr_mapcell_t_2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t_1 >*
      mutable_ptr_mapcell_t_2();
  private:
  const ::map::mapCell_t_1& _internal_ptr_mapcell_t_2(int index) const;
  ::map::mapCell_t_1* _internal_add_ptr_mapcell_t_2();
  public:
  const ::map::mapCell_t_1& ptr_mapcell_t_2(int index) const;
  ::map::mapCell_t_1* add_ptr_mapcell_t_2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t_1 >&
      ptr_mapcell_t_2() const;

  // @@protoc_insertion_point(class_scope:map.mapCell_t_2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t_1 > ptr_mapcell_t_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class childMap_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.childMap_t) */ {
 public:
  childMap_t();
  virtual ~childMap_t();

  childMap_t(const childMap_t& from);
  childMap_t(childMap_t&& from) noexcept
    : childMap_t() {
    *this = ::std::move(from);
  }

  inline childMap_t& operator=(const childMap_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline childMap_t& operator=(childMap_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const childMap_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const childMap_t* internal_default_instance() {
    return reinterpret_cast<const childMap_t*>(
               &_childMap_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(childMap_t& a, childMap_t& b) {
    a.Swap(&b);
  }
  inline void Swap(childMap_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline childMap_t* New() const final {
    return CreateMaybeMessage<childMap_t>(nullptr);
  }

  childMap_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<childMap_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const childMap_t& from);
  void MergeFrom(const childMap_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(childMap_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.childMap_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellArrayFieldNumber = 1,
    kCloudFieldNumber = 7,
    kSubIndFieldNumber = 2,
    kIndXFieldNumber = 3,
    kIndYFieldNumber = 4,
    kOriginXFieldNumber = 5,
    kOriginYFieldNumber = 6,
  };
  // .map.mapCell_t_2 cellArray = 1;
  bool has_cellarray() const;
  private:
  bool _internal_has_cellarray() const;
  public:
  void clear_cellarray();
  const ::map::mapCell_t_2& cellarray() const;
  ::map::mapCell_t_2* release_cellarray();
  ::map::mapCell_t_2* mutable_cellarray();
  void set_allocated_cellarray(::map::mapCell_t_2* cellarray);
  private:
  const ::map::mapCell_t_2& _internal_cellarray() const;
  ::map::mapCell_t_2* _internal_mutable_cellarray();
  public:

  // .map.PointCloud cloud = 7;
  bool has_cloud() const;
  private:
  bool _internal_has_cloud() const;
  public:
  void clear_cloud();
  const ::map::PointCloud& cloud() const;
  ::map::PointCloud* release_cloud();
  ::map::PointCloud* mutable_cloud();
  void set_allocated_cloud(::map::PointCloud* cloud);
  private:
  const ::map::PointCloud& _internal_cloud() const;
  ::map::PointCloud* _internal_mutable_cloud();
  public:

  // int32 subInd = 2;
  void clear_subind();
  ::PROTOBUF_NAMESPACE_ID::int32 subind() const;
  void set_subind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_subind() const;
  void _internal_set_subind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 indX = 3;
  void clear_indx();
  ::PROTOBUF_NAMESPACE_ID::int32 indx() const;
  void set_indx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indx() const;
  void _internal_set_indx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 indY = 4;
  void clear_indy();
  ::PROTOBUF_NAMESPACE_ID::int32 indy() const;
  void set_indy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indy() const;
  void _internal_set_indy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float originX = 5;
  void clear_originx();
  float originx() const;
  void set_originx(float value);
  private:
  float _internal_originx() const;
  void _internal_set_originx(float value);
  public:

  // float originY = 6;
  void clear_originy();
  float originy() const;
  void set_originy(float value);
  private:
  float _internal_originy() const;
  void _internal_set_originy(float value);
  public:

  // @@protoc_insertion_point(class_scope:map.childMap_t)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::map::mapCell_t_2* cellarray_;
  ::map::PointCloud* cloud_;
  ::PROTOBUF_NAMESPACE_ID::int32 subind_;
  ::PROTOBUF_NAMESPACE_ID::int32 indx_;
  ::PROTOBUF_NAMESPACE_ID::int32 indy_;
  float originx_;
  float originy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// -------------------------------------------------------------------

class mapArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:map.mapArray) */ {
 public:
  mapArray();
  virtual ~mapArray();

  mapArray(const mapArray& from);
  mapArray(mapArray&& from) noexcept
    : mapArray() {
    *this = ::std::move(from);
  }

  inline mapArray& operator=(const mapArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline mapArray& operator=(mapArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mapArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mapArray* internal_default_instance() {
    return reinterpret_cast<const mapArray*>(
               &_mapArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(mapArray& a, mapArray& b) {
    a.Swap(&b);
  }
  inline void Swap(mapArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mapArray* New() const final {
    return CreateMaybeMessage<mapArray>(nullptr);
  }

  mapArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mapArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mapArray& from);
  void MergeFrom(const mapArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mapArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "map.mapArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_map_2eproto);
    return ::descriptor_table_map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtrChildMapTsFieldNumber = 1,
  };
  // repeated .map.childMap_t Ptr_childMap_ts = 1;
  int ptr_childmap_ts_size() const;
  private:
  int _internal_ptr_childmap_ts_size() const;
  public:
  void clear_ptr_childmap_ts();
  ::map::childMap_t* mutable_ptr_childmap_ts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::childMap_t >*
      mutable_ptr_childmap_ts();
  private:
  const ::map::childMap_t& _internal_ptr_childmap_ts(int index) const;
  ::map::childMap_t* _internal_add_ptr_childmap_ts();
  public:
  const ::map::childMap_t& ptr_childmap_ts(int index) const;
  ::map::childMap_t* add_ptr_childmap_ts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::childMap_t >&
      ptr_childmap_ts() const;

  // @@protoc_insertion_point(class_scope:map.mapArray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::childMap_t > ptr_childmap_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// fdata4

// float data1 = 1;
inline void fdata4::clear_data1() {
  data1_ = 0;
}
inline float fdata4::_internal_data1() const {
  return data1_;
}
inline float fdata4::data1() const {
  // @@protoc_insertion_point(field_get:map.fdata4.data1)
  return _internal_data1();
}
inline void fdata4::_internal_set_data1(float value) {
  
  data1_ = value;
}
inline void fdata4::set_data1(float value) {
  _internal_set_data1(value);
  // @@protoc_insertion_point(field_set:map.fdata4.data1)
}

// float data2 = 2;
inline void fdata4::clear_data2() {
  data2_ = 0;
}
inline float fdata4::_internal_data2() const {
  return data2_;
}
inline float fdata4::data2() const {
  // @@protoc_insertion_point(field_get:map.fdata4.data2)
  return _internal_data2();
}
inline void fdata4::_internal_set_data2(float value) {
  
  data2_ = value;
}
inline void fdata4::set_data2(float value) {
  _internal_set_data2(value);
  // @@protoc_insertion_point(field_set:map.fdata4.data2)
}

// float data3 = 3;
inline void fdata4::clear_data3() {
  data3_ = 0;
}
inline float fdata4::_internal_data3() const {
  return data3_;
}
inline float fdata4::data3() const {
  // @@protoc_insertion_point(field_get:map.fdata4.data3)
  return _internal_data3();
}
inline void fdata4::_internal_set_data3(float value) {
  
  data3_ = value;
}
inline void fdata4::set_data3(float value) {
  _internal_set_data3(value);
  // @@protoc_insertion_point(field_set:map.fdata4.data3)
}

// float data4 = 4;
inline void fdata4::clear_data4() {
  data4_ = 0;
}
inline float fdata4::_internal_data4() const {
  return data4_;
}
inline float fdata4::data4() const {
  // @@protoc_insertion_point(field_get:map.fdata4.data4)
  return _internal_data4();
}
inline void fdata4::_internal_set_data4(float value) {
  
  data4_ = value;
}
inline void fdata4::set_data4(float value) {
  _internal_set_data4(value);
  // @@protoc_insertion_point(field_set:map.fdata4.data4)
}

// -------------------------------------------------------------------

// PointType

// float x = 1;
inline void PointType::clear_x() {
  x_ = 0;
}
inline float PointType::_internal_x() const {
  return x_;
}
inline float PointType::x() const {
  // @@protoc_insertion_point(field_get:map.PointType.x)
  return _internal_x();
}
inline void PointType::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PointType::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:map.PointType.x)
}

// float y = 2;
inline void PointType::clear_y() {
  y_ = 0;
}
inline float PointType::_internal_y() const {
  return y_;
}
inline float PointType::y() const {
  // @@protoc_insertion_point(field_get:map.PointType.y)
  return _internal_y();
}
inline void PointType::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PointType::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:map.PointType.y)
}

// float z = 3;
inline void PointType::clear_z() {
  z_ = 0;
}
inline float PointType::_internal_z() const {
  return z_;
}
inline float PointType::z() const {
  // @@protoc_insertion_point(field_get:map.PointType.z)
  return _internal_z();
}
inline void PointType::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PointType::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:map.PointType.z)
}

// float intensity = 4;
inline void PointType::clear_intensity() {
  intensity_ = 0;
}
inline float PointType::_internal_intensity() const {
  return intensity_;
}
inline float PointType::intensity() const {
  // @@protoc_insertion_point(field_get:map.PointType.intensity)
  return _internal_intensity();
}
inline void PointType::_internal_set_intensity(float value) {
  
  intensity_ = value;
}
inline void PointType::set_intensity(float value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:map.PointType.intensity)
}

// -------------------------------------------------------------------

// PointCloud

// repeated .map.PointType point = 1;
inline int PointCloud::_internal_point_size() const {
  return point_.size();
}
inline int PointCloud::point_size() const {
  return _internal_point_size();
}
inline void PointCloud::clear_point() {
  point_.Clear();
}
inline ::map::PointType* PointCloud::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:map.PointCloud.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::PointType >*
PointCloud::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:map.PointCloud.point)
  return &point_;
}
inline const ::map::PointType& PointCloud::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::map::PointType& PointCloud::point(int index) const {
  // @@protoc_insertion_point(field_get:map.PointCloud.point)
  return _internal_point(index);
}
inline ::map::PointType* PointCloud::_internal_add_point() {
  return point_.Add();
}
inline ::map::PointType* PointCloud::add_point() {
  // @@protoc_insertion_point(field_add:map.PointCloud.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::PointType >&
PointCloud::point() const {
  // @@protoc_insertion_point(field_list:map.PointCloud.point)
  return point_;
}

// -------------------------------------------------------------------

// grid_t

// int32 mapID = 1;
inline void grid_t::clear_mapid() {
  mapid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::mapid() const {
  // @@protoc_insertion_point(field_get:map.grid_t.mapID)
  return _internal_mapid();
}
inline void grid_t::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mapid_ = value;
}
inline void grid_t::set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:map.grid_t.mapID)
}

// int32 cubeX = 2;
inline void grid_t::clear_cubex() {
  cubex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::_internal_cubex() const {
  return cubex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::cubex() const {
  // @@protoc_insertion_point(field_get:map.grid_t.cubeX)
  return _internal_cubex();
}
inline void grid_t::_internal_set_cubex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cubex_ = value;
}
inline void grid_t::set_cubex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cubex(value);
  // @@protoc_insertion_point(field_set:map.grid_t.cubeX)
}

// int32 cubeY = 3;
inline void grid_t::clear_cubey() {
  cubey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::_internal_cubey() const {
  return cubey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::cubey() const {
  // @@protoc_insertion_point(field_get:map.grid_t.cubeY)
  return _internal_cubey();
}
inline void grid_t::_internal_set_cubey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cubey_ = value;
}
inline void grid_t::set_cubey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cubey(value);
  // @@protoc_insertion_point(field_set:map.grid_t.cubeY)
}

// int32 gridX = 4;
inline void grid_t::clear_gridx() {
  gridx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::_internal_gridx() const {
  return gridx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::gridx() const {
  // @@protoc_insertion_point(field_get:map.grid_t.gridX)
  return _internal_gridx();
}
inline void grid_t::_internal_set_gridx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gridx_ = value;
}
inline void grid_t::set_gridx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gridx(value);
  // @@protoc_insertion_point(field_set:map.grid_t.gridX)
}

// int32 gridY = 5;
inline void grid_t::clear_gridy() {
  gridy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::_internal_gridy() const {
  return gridy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::gridy() const {
  // @@protoc_insertion_point(field_get:map.grid_t.gridY)
  return _internal_gridy();
}
inline void grid_t::_internal_set_gridy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gridy_ = value;
}
inline void grid_t::set_gridy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gridy(value);
  // @@protoc_insertion_point(field_set:map.grid_t.gridY)
}

// int32 gridIndex = 6;
inline void grid_t::clear_gridindex() {
  gridindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::_internal_gridindex() const {
  return gridindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 grid_t::gridindex() const {
  // @@protoc_insertion_point(field_get:map.grid_t.gridIndex)
  return _internal_gridindex();
}
inline void grid_t::_internal_set_gridindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gridindex_ = value;
}
inline void grid_t::set_gridindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gridindex(value);
  // @@protoc_insertion_point(field_set:map.grid_t.gridIndex)
}

// -------------------------------------------------------------------

// mapCell_t

// .map.PointType Ptr_xyz = 1;
inline bool mapCell_t::_internal_has_ptr_xyz() const {
  return this != internal_default_instance() && ptr_xyz_ != nullptr;
}
inline bool mapCell_t::has_ptr_xyz() const {
  return _internal_has_ptr_xyz();
}
inline void mapCell_t::clear_ptr_xyz() {
  if (GetArenaNoVirtual() == nullptr && ptr_xyz_ != nullptr) {
    delete ptr_xyz_;
  }
  ptr_xyz_ = nullptr;
}
inline const ::map::PointType& mapCell_t::_internal_ptr_xyz() const {
  const ::map::PointType* p = ptr_xyz_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map::PointType*>(
      &::map::_PointType_default_instance_);
}
inline const ::map::PointType& mapCell_t::ptr_xyz() const {
  // @@protoc_insertion_point(field_get:map.mapCell_t.Ptr_xyz)
  return _internal_ptr_xyz();
}
inline ::map::PointType* mapCell_t::release_ptr_xyz() {
  // @@protoc_insertion_point(field_release:map.mapCell_t.Ptr_xyz)
  
  ::map::PointType* temp = ptr_xyz_;
  ptr_xyz_ = nullptr;
  return temp;
}
inline ::map::PointType* mapCell_t::_internal_mutable_ptr_xyz() {
  
  if (ptr_xyz_ == nullptr) {
    auto* p = CreateMaybeMessage<::map::PointType>(GetArenaNoVirtual());
    ptr_xyz_ = p;
  }
  return ptr_xyz_;
}
inline ::map::PointType* mapCell_t::mutable_ptr_xyz() {
  // @@protoc_insertion_point(field_mutable:map.mapCell_t.Ptr_xyz)
  return _internal_mutable_ptr_xyz();
}
inline void mapCell_t::set_allocated_ptr_xyz(::map::PointType* ptr_xyz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ptr_xyz_;
  }
  if (ptr_xyz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ptr_xyz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ptr_xyz, submessage_arena);
    }
    
  } else {
    
  }
  ptr_xyz_ = ptr_xyz;
  // @@protoc_insertion_point(field_set_allocated:map.mapCell_t.Ptr_xyz)
}

// .map.grid_t grid = 2;
inline bool mapCell_t::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool mapCell_t::has_grid() const {
  return _internal_has_grid();
}
inline void mapCell_t::clear_grid() {
  if (GetArenaNoVirtual() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::map::grid_t& mapCell_t::_internal_grid() const {
  const ::map::grid_t* p = grid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map::grid_t*>(
      &::map::_grid_t_default_instance_);
}
inline const ::map::grid_t& mapCell_t::grid() const {
  // @@protoc_insertion_point(field_get:map.mapCell_t.grid)
  return _internal_grid();
}
inline ::map::grid_t* mapCell_t::release_grid() {
  // @@protoc_insertion_point(field_release:map.mapCell_t.grid)
  
  ::map::grid_t* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::map::grid_t* mapCell_t::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::map::grid_t>(GetArenaNoVirtual());
    grid_ = p;
  }
  return grid_;
}
inline ::map::grid_t* mapCell_t::mutable_grid() {
  // @@protoc_insertion_point(field_mutable:map.mapCell_t.grid)
  return _internal_mutable_grid();
}
inline void mapCell_t::set_allocated_grid(::map::grid_t* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:map.mapCell_t.grid)
}

// float log_odds = 3;
inline void mapCell_t::clear_log_odds() {
  log_odds_ = 0;
}
inline float mapCell_t::_internal_log_odds() const {
  return log_odds_;
}
inline float mapCell_t::log_odds() const {
  // @@protoc_insertion_point(field_get:map.mapCell_t.log_odds)
  return _internal_log_odds();
}
inline void mapCell_t::_internal_set_log_odds(float value) {
  
  log_odds_ = value;
}
inline void mapCell_t::set_log_odds(float value) {
  _internal_set_log_odds(value);
  // @@protoc_insertion_point(field_set:map.mapCell_t.log_odds)
}

// int32 observeTimes = 4;
inline void mapCell_t::clear_observetimes() {
  observetimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mapCell_t::_internal_observetimes() const {
  return observetimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mapCell_t::observetimes() const {
  // @@protoc_insertion_point(field_get:map.mapCell_t.observeTimes)
  return _internal_observetimes();
}
inline void mapCell_t::_internal_set_observetimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  observetimes_ = value;
}
inline void mapCell_t::set_observetimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_observetimes(value);
  // @@protoc_insertion_point(field_set:map.mapCell_t.observeTimes)
}

// float occupancy = 5;
inline void mapCell_t::clear_occupancy() {
  occupancy_ = 0;
}
inline float mapCell_t::_internal_occupancy() const {
  return occupancy_;
}
inline float mapCell_t::occupancy() const {
  // @@protoc_insertion_point(field_get:map.mapCell_t.occupancy)
  return _internal_occupancy();
}
inline void mapCell_t::_internal_set_occupancy(float value) {
  
  occupancy_ = value;
}
inline void mapCell_t::set_occupancy(float value) {
  _internal_set_occupancy(value);
  // @@protoc_insertion_point(field_set:map.mapCell_t.occupancy)
}

// float occupancyVar = 6;
inline void mapCell_t::clear_occupancyvar() {
  occupancyvar_ = 0;
}
inline float mapCell_t::_internal_occupancyvar() const {
  return occupancyvar_;
}
inline float mapCell_t::occupancyvar() const {
  // @@protoc_insertion_point(field_get:map.mapCell_t.occupancyVar)
  return _internal_occupancyvar();
}
inline void mapCell_t::_internal_set_occupancyvar(float value) {
  
  occupancyvar_ = value;
}
inline void mapCell_t::set_occupancyvar(float value) {
  _internal_set_occupancyvar(value);
  // @@protoc_insertion_point(field_set:map.mapCell_t.occupancyVar)
}

// float elevation = 7;
inline void mapCell_t::clear_elevation() {
  elevation_ = 0;
}
inline float mapCell_t::_internal_elevation() const {
  return elevation_;
}
inline float mapCell_t::elevation() const {
  // @@protoc_insertion_point(field_get:map.mapCell_t.elevation)
  return _internal_elevation();
}
inline void mapCell_t::_internal_set_elevation(float value) {
  
  elevation_ = value;
}
inline void mapCell_t::set_elevation(float value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:map.mapCell_t.elevation)
}

// float elevationVar = 8;
inline void mapCell_t::clear_elevationvar() {
  elevationvar_ = 0;
}
inline float mapCell_t::_internal_elevationvar() const {
  return elevationvar_;
}
inline float mapCell_t::elevationvar() const {
  // @@protoc_insertion_point(field_get:map.mapCell_t.elevationVar)
  return _internal_elevationvar();
}
inline void mapCell_t::_internal_set_elevationvar(float value) {
  
  elevationvar_ = value;
}
inline void mapCell_t::set_elevationvar(float value) {
  _internal_set_elevationvar(value);
  // @@protoc_insertion_point(field_set:map.mapCell_t.elevationVar)
}

// -------------------------------------------------------------------

// mapCell_t_1

// repeated .map.mapCell_t Ptr_mapCell_t_1 = 1;
inline int mapCell_t_1::_internal_ptr_mapcell_t_1_size() const {
  return ptr_mapcell_t_1_.size();
}
inline int mapCell_t_1::ptr_mapcell_t_1_size() const {
  return _internal_ptr_mapcell_t_1_size();
}
inline void mapCell_t_1::clear_ptr_mapcell_t_1() {
  ptr_mapcell_t_1_.Clear();
}
inline ::map::mapCell_t* mapCell_t_1::mutable_ptr_mapcell_t_1(int index) {
  // @@protoc_insertion_point(field_mutable:map.mapCell_t_1.Ptr_mapCell_t_1)
  return ptr_mapcell_t_1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t >*
mapCell_t_1::mutable_ptr_mapcell_t_1() {
  // @@protoc_insertion_point(field_mutable_list:map.mapCell_t_1.Ptr_mapCell_t_1)
  return &ptr_mapcell_t_1_;
}
inline const ::map::mapCell_t& mapCell_t_1::_internal_ptr_mapcell_t_1(int index) const {
  return ptr_mapcell_t_1_.Get(index);
}
inline const ::map::mapCell_t& mapCell_t_1::ptr_mapcell_t_1(int index) const {
  // @@protoc_insertion_point(field_get:map.mapCell_t_1.Ptr_mapCell_t_1)
  return _internal_ptr_mapcell_t_1(index);
}
inline ::map::mapCell_t* mapCell_t_1::_internal_add_ptr_mapcell_t_1() {
  return ptr_mapcell_t_1_.Add();
}
inline ::map::mapCell_t* mapCell_t_1::add_ptr_mapcell_t_1() {
  // @@protoc_insertion_point(field_add:map.mapCell_t_1.Ptr_mapCell_t_1)
  return _internal_add_ptr_mapcell_t_1();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t >&
mapCell_t_1::ptr_mapcell_t_1() const {
  // @@protoc_insertion_point(field_list:map.mapCell_t_1.Ptr_mapCell_t_1)
  return ptr_mapcell_t_1_;
}

// -------------------------------------------------------------------

// mapCell_t_2

// repeated .map.mapCell_t_1 Ptr_mapCell_t_2 = 1;
inline int mapCell_t_2::_internal_ptr_mapcell_t_2_size() const {
  return ptr_mapcell_t_2_.size();
}
inline int mapCell_t_2::ptr_mapcell_t_2_size() const {
  return _internal_ptr_mapcell_t_2_size();
}
inline void mapCell_t_2::clear_ptr_mapcell_t_2() {
  ptr_mapcell_t_2_.Clear();
}
inline ::map::mapCell_t_1* mapCell_t_2::mutable_ptr_mapcell_t_2(int index) {
  // @@protoc_insertion_point(field_mutable:map.mapCell_t_2.Ptr_mapCell_t_2)
  return ptr_mapcell_t_2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t_1 >*
mapCell_t_2::mutable_ptr_mapcell_t_2() {
  // @@protoc_insertion_point(field_mutable_list:map.mapCell_t_2.Ptr_mapCell_t_2)
  return &ptr_mapcell_t_2_;
}
inline const ::map::mapCell_t_1& mapCell_t_2::_internal_ptr_mapcell_t_2(int index) const {
  return ptr_mapcell_t_2_.Get(index);
}
inline const ::map::mapCell_t_1& mapCell_t_2::ptr_mapcell_t_2(int index) const {
  // @@protoc_insertion_point(field_get:map.mapCell_t_2.Ptr_mapCell_t_2)
  return _internal_ptr_mapcell_t_2(index);
}
inline ::map::mapCell_t_1* mapCell_t_2::_internal_add_ptr_mapcell_t_2() {
  return ptr_mapcell_t_2_.Add();
}
inline ::map::mapCell_t_1* mapCell_t_2::add_ptr_mapcell_t_2() {
  // @@protoc_insertion_point(field_add:map.mapCell_t_2.Ptr_mapCell_t_2)
  return _internal_add_ptr_mapcell_t_2();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::mapCell_t_1 >&
mapCell_t_2::ptr_mapcell_t_2() const {
  // @@protoc_insertion_point(field_list:map.mapCell_t_2.Ptr_mapCell_t_2)
  return ptr_mapcell_t_2_;
}

// -------------------------------------------------------------------

// childMap_t

// .map.mapCell_t_2 cellArray = 1;
inline bool childMap_t::_internal_has_cellarray() const {
  return this != internal_default_instance() && cellarray_ != nullptr;
}
inline bool childMap_t::has_cellarray() const {
  return _internal_has_cellarray();
}
inline void childMap_t::clear_cellarray() {
  if (GetArenaNoVirtual() == nullptr && cellarray_ != nullptr) {
    delete cellarray_;
  }
  cellarray_ = nullptr;
}
inline const ::map::mapCell_t_2& childMap_t::_internal_cellarray() const {
  const ::map::mapCell_t_2* p = cellarray_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map::mapCell_t_2*>(
      &::map::_mapCell_t_2_default_instance_);
}
inline const ::map::mapCell_t_2& childMap_t::cellarray() const {
  // @@protoc_insertion_point(field_get:map.childMap_t.cellArray)
  return _internal_cellarray();
}
inline ::map::mapCell_t_2* childMap_t::release_cellarray() {
  // @@protoc_insertion_point(field_release:map.childMap_t.cellArray)
  
  ::map::mapCell_t_2* temp = cellarray_;
  cellarray_ = nullptr;
  return temp;
}
inline ::map::mapCell_t_2* childMap_t::_internal_mutable_cellarray() {
  
  if (cellarray_ == nullptr) {
    auto* p = CreateMaybeMessage<::map::mapCell_t_2>(GetArenaNoVirtual());
    cellarray_ = p;
  }
  return cellarray_;
}
inline ::map::mapCell_t_2* childMap_t::mutable_cellarray() {
  // @@protoc_insertion_point(field_mutable:map.childMap_t.cellArray)
  return _internal_mutable_cellarray();
}
inline void childMap_t::set_allocated_cellarray(::map::mapCell_t_2* cellarray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cellarray_;
  }
  if (cellarray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cellarray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellarray, submessage_arena);
    }
    
  } else {
    
  }
  cellarray_ = cellarray;
  // @@protoc_insertion_point(field_set_allocated:map.childMap_t.cellArray)
}

// int32 subInd = 2;
inline void childMap_t::clear_subind() {
  subind_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 childMap_t::_internal_subind() const {
  return subind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 childMap_t::subind() const {
  // @@protoc_insertion_point(field_get:map.childMap_t.subInd)
  return _internal_subind();
}
inline void childMap_t::_internal_set_subind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subind_ = value;
}
inline void childMap_t::set_subind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_subind(value);
  // @@protoc_insertion_point(field_set:map.childMap_t.subInd)
}

// int32 indX = 3;
inline void childMap_t::clear_indx() {
  indx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 childMap_t::_internal_indx() const {
  return indx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 childMap_t::indx() const {
  // @@protoc_insertion_point(field_get:map.childMap_t.indX)
  return _internal_indx();
}
inline void childMap_t::_internal_set_indx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  indx_ = value;
}
inline void childMap_t::set_indx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_indx(value);
  // @@protoc_insertion_point(field_set:map.childMap_t.indX)
}

// int32 indY = 4;
inline void childMap_t::clear_indy() {
  indy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 childMap_t::_internal_indy() const {
  return indy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 childMap_t::indy() const {
  // @@protoc_insertion_point(field_get:map.childMap_t.indY)
  return _internal_indy();
}
inline void childMap_t::_internal_set_indy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  indy_ = value;
}
inline void childMap_t::set_indy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_indy(value);
  // @@protoc_insertion_point(field_set:map.childMap_t.indY)
}

// float originX = 5;
inline void childMap_t::clear_originx() {
  originx_ = 0;
}
inline float childMap_t::_internal_originx() const {
  return originx_;
}
inline float childMap_t::originx() const {
  // @@protoc_insertion_point(field_get:map.childMap_t.originX)
  return _internal_originx();
}
inline void childMap_t::_internal_set_originx(float value) {
  
  originx_ = value;
}
inline void childMap_t::set_originx(float value) {
  _internal_set_originx(value);
  // @@protoc_insertion_point(field_set:map.childMap_t.originX)
}

// float originY = 6;
inline void childMap_t::clear_originy() {
  originy_ = 0;
}
inline float childMap_t::_internal_originy() const {
  return originy_;
}
inline float childMap_t::originy() const {
  // @@protoc_insertion_point(field_get:map.childMap_t.originY)
  return _internal_originy();
}
inline void childMap_t::_internal_set_originy(float value) {
  
  originy_ = value;
}
inline void childMap_t::set_originy(float value) {
  _internal_set_originy(value);
  // @@protoc_insertion_point(field_set:map.childMap_t.originY)
}

// .map.PointCloud cloud = 7;
inline bool childMap_t::_internal_has_cloud() const {
  return this != internal_default_instance() && cloud_ != nullptr;
}
inline bool childMap_t::has_cloud() const {
  return _internal_has_cloud();
}
inline void childMap_t::clear_cloud() {
  if (GetArenaNoVirtual() == nullptr && cloud_ != nullptr) {
    delete cloud_;
  }
  cloud_ = nullptr;
}
inline const ::map::PointCloud& childMap_t::_internal_cloud() const {
  const ::map::PointCloud* p = cloud_;
  return p != nullptr ? *p : *reinterpret_cast<const ::map::PointCloud*>(
      &::map::_PointCloud_default_instance_);
}
inline const ::map::PointCloud& childMap_t::cloud() const {
  // @@protoc_insertion_point(field_get:map.childMap_t.cloud)
  return _internal_cloud();
}
inline ::map::PointCloud* childMap_t::release_cloud() {
  // @@protoc_insertion_point(field_release:map.childMap_t.cloud)
  
  ::map::PointCloud* temp = cloud_;
  cloud_ = nullptr;
  return temp;
}
inline ::map::PointCloud* childMap_t::_internal_mutable_cloud() {
  
  if (cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::map::PointCloud>(GetArenaNoVirtual());
    cloud_ = p;
  }
  return cloud_;
}
inline ::map::PointCloud* childMap_t::mutable_cloud() {
  // @@protoc_insertion_point(field_mutable:map.childMap_t.cloud)
  return _internal_mutable_cloud();
}
inline void childMap_t::set_allocated_cloud(::map::PointCloud* cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cloud_;
  }
  if (cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud, submessage_arena);
    }
    
  } else {
    
  }
  cloud_ = cloud;
  // @@protoc_insertion_point(field_set_allocated:map.childMap_t.cloud)
}

// -------------------------------------------------------------------

// mapArray

// repeated .map.childMap_t Ptr_childMap_ts = 1;
inline int mapArray::_internal_ptr_childmap_ts_size() const {
  return ptr_childmap_ts_.size();
}
inline int mapArray::ptr_childmap_ts_size() const {
  return _internal_ptr_childmap_ts_size();
}
inline void mapArray::clear_ptr_childmap_ts() {
  ptr_childmap_ts_.Clear();
}
inline ::map::childMap_t* mapArray::mutable_ptr_childmap_ts(int index) {
  // @@protoc_insertion_point(field_mutable:map.mapArray.Ptr_childMap_ts)
  return ptr_childmap_ts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::childMap_t >*
mapArray::mutable_ptr_childmap_ts() {
  // @@protoc_insertion_point(field_mutable_list:map.mapArray.Ptr_childMap_ts)
  return &ptr_childmap_ts_;
}
inline const ::map::childMap_t& mapArray::_internal_ptr_childmap_ts(int index) const {
  return ptr_childmap_ts_.Get(index);
}
inline const ::map::childMap_t& mapArray::ptr_childmap_ts(int index) const {
  // @@protoc_insertion_point(field_get:map.mapArray.Ptr_childMap_ts)
  return _internal_ptr_childmap_ts(index);
}
inline ::map::childMap_t* mapArray::_internal_add_ptr_childmap_ts() {
  return ptr_childmap_ts_.Add();
}
inline ::map::childMap_t* mapArray::add_ptr_childmap_ts() {
  // @@protoc_insertion_point(field_add:map.mapArray.Ptr_childMap_ts)
  return _internal_add_ptr_childmap_ts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::map::childMap_t >&
mapArray::ptr_childmap_ts() const {
  // @@protoc_insertion_point(field_list:map.mapArray.Ptr_childMap_ts)
  return ptr_childmap_ts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace map

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_2eproto
