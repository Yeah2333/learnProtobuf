// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#include "map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PointCloud_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointType_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_childMap_t_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_grid_t_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_mapCell_t_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mapCell_t_1_map_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_map_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mapCell_t_2_map_2eproto;
namespace map {
class fdata4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fdata4> _instance;
} _fdata4_default_instance_;
class PointTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointType> _instance;
} _PointType_default_instance_;
class PointCloudDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointCloud> _instance;
} _PointCloud_default_instance_;
class grid_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<grid_t> _instance;
} _grid_t_default_instance_;
class mapCell_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mapCell_t> _instance;
} _mapCell_t_default_instance_;
class mapCell_t_1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mapCell_t_1> _instance;
} _mapCell_t_1_default_instance_;
class mapCell_t_2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mapCell_t_2> _instance;
} _mapCell_t_2_default_instance_;
class childMap_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<childMap_t> _instance;
} _childMap_t_default_instance_;
class mapArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mapArray> _instance;
} _mapArray_default_instance_;
}  // namespace map
static void InitDefaultsscc_info_PointCloud_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_PointCloud_default_instance_;
    new (ptr) ::map::PointCloud();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::PointCloud::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PointCloud_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PointCloud_map_2eproto}, {
      &scc_info_PointType_map_2eproto.base,}};

static void InitDefaultsscc_info_PointType_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_PointType_default_instance_;
    new (ptr) ::map::PointType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::PointType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointType_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointType_map_2eproto}, {}};

static void InitDefaultsscc_info_childMap_t_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_childMap_t_default_instance_;
    new (ptr) ::map::childMap_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::childMap_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_childMap_t_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_childMap_t_map_2eproto}, {
      &scc_info_mapCell_t_2_map_2eproto.base,
      &scc_info_PointCloud_map_2eproto.base,}};

static void InitDefaultsscc_info_fdata4_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_fdata4_default_instance_;
    new (ptr) ::map::fdata4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::fdata4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fdata4_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_fdata4_map_2eproto}, {}};

static void InitDefaultsscc_info_grid_t_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_grid_t_default_instance_;
    new (ptr) ::map::grid_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::grid_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_grid_t_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_grid_t_map_2eproto}, {}};

static void InitDefaultsscc_info_mapArray_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_mapArray_default_instance_;
    new (ptr) ::map::mapArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::mapArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mapArray_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mapArray_map_2eproto}, {
      &scc_info_childMap_t_map_2eproto.base,}};

static void InitDefaultsscc_info_mapCell_t_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_mapCell_t_default_instance_;
    new (ptr) ::map::mapCell_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::mapCell_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_mapCell_t_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_mapCell_t_map_2eproto}, {
      &scc_info_PointType_map_2eproto.base,
      &scc_info_grid_t_map_2eproto.base,}};

static void InitDefaultsscc_info_mapCell_t_1_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_mapCell_t_1_default_instance_;
    new (ptr) ::map::mapCell_t_1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::mapCell_t_1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mapCell_t_1_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mapCell_t_1_map_2eproto}, {
      &scc_info_mapCell_t_map_2eproto.base,}};

static void InitDefaultsscc_info_mapCell_t_2_map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::map::_mapCell_t_2_default_instance_;
    new (ptr) ::map::mapCell_t_2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::map::mapCell_t_2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mapCell_t_2_map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_mapCell_t_2_map_2eproto}, {
      &scc_info_mapCell_t_1_map_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_map_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::fdata4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::fdata4, data1_),
  PROTOBUF_FIELD_OFFSET(::map::fdata4, data2_),
  PROTOBUF_FIELD_OFFSET(::map::fdata4, data3_),
  PROTOBUF_FIELD_OFFSET(::map::fdata4, data4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::PointType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::PointType, x_),
  PROTOBUF_FIELD_OFFSET(::map::PointType, y_),
  PROTOBUF_FIELD_OFFSET(::map::PointType, z_),
  PROTOBUF_FIELD_OFFSET(::map::PointType, intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::PointCloud, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::grid_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::grid_t, mapid_),
  PROTOBUF_FIELD_OFFSET(::map::grid_t, cubex_),
  PROTOBUF_FIELD_OFFSET(::map::grid_t, cubey_),
  PROTOBUF_FIELD_OFFSET(::map::grid_t, gridx_),
  PROTOBUF_FIELD_OFFSET(::map::grid_t, gridy_),
  PROTOBUF_FIELD_OFFSET(::map::grid_t, gridindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, ptr_xyz_),
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, grid_),
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, log_odds_),
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, observetimes_),
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, occupancy_),
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, occupancyvar_),
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, elevation_),
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t, elevationvar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t_1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t_1, ptr_mapcell_t_1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t_2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::mapCell_t_2, ptr_mapcell_t_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::childMap_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::childMap_t, cellarray_),
  PROTOBUF_FIELD_OFFSET(::map::childMap_t, subind_),
  PROTOBUF_FIELD_OFFSET(::map::childMap_t, indx_),
  PROTOBUF_FIELD_OFFSET(::map::childMap_t, indy_),
  PROTOBUF_FIELD_OFFSET(::map::childMap_t, originx_),
  PROTOBUF_FIELD_OFFSET(::map::childMap_t, originy_),
  PROTOBUF_FIELD_OFFSET(::map::childMap_t, cloud_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::map::mapArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::map::mapArray, ptr_childmap_ts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::map::fdata4)},
  { 9, -1, sizeof(::map::PointType)},
  { 18, -1, sizeof(::map::PointCloud)},
  { 24, -1, sizeof(::map::grid_t)},
  { 35, -1, sizeof(::map::mapCell_t)},
  { 48, -1, sizeof(::map::mapCell_t_1)},
  { 54, -1, sizeof(::map::mapCell_t_2)},
  { 60, -1, sizeof(::map::childMap_t)},
  { 72, -1, sizeof(::map::mapArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_fdata4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_PointType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_PointCloud_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_grid_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_mapCell_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_mapCell_t_1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_mapCell_t_2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_childMap_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::map::_mapArray_default_instance_),
};

const char descriptor_table_protodef_map_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmap.proto\022\003map\"D\n\006fdata4\022\r\n\005data1\030\001 \001("
  "\002\022\r\n\005data2\030\002 \001(\002\022\r\n\005data3\030\003 \001(\002\022\r\n\005data4"
  "\030\004 \001(\002\"\?\n\tPointType\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
  "\002\022\t\n\001z\030\003 \001(\002\022\021\n\tintensity\030\004 \001(\002\"+\n\nPoint"
  "Cloud\022\035\n\005point\030\001 \003(\0132\016.map.PointType\"f\n\006"
  "grid_t\022\r\n\005mapID\030\001 \001(\005\022\r\n\005cubeX\030\002 \001(\005\022\r\n\005"
  "cubeY\030\003 \001(\005\022\r\n\005gridX\030\004 \001(\005\022\r\n\005gridY\030\005 \001("
  "\005\022\021\n\tgridIndex\030\006 \001(\005\"\301\001\n\tmapCell_t\022\037\n\007Pt"
  "r_xyz\030\001 \001(\0132\016.map.PointType\022\031\n\004grid\030\002 \001("
  "\0132\013.map.grid_t\022\020\n\010log_odds\030\003 \001(\002\022\024\n\014obse"
  "rveTimes\030\004 \001(\005\022\021\n\toccupancy\030\005 \001(\002\022\024\n\014occ"
  "upancyVar\030\006 \001(\002\022\021\n\televation\030\007 \001(\002\022\024\n\014el"
  "evationVar\030\010 \001(\002\"6\n\013mapCell_t_1\022\'\n\017Ptr_m"
  "apCell_t_1\030\001 \003(\0132\016.map.mapCell_t\"8\n\013mapC"
  "ell_t_2\022)\n\017Ptr_mapCell_t_2\030\001 \003(\0132\020.map.m"
  "apCell_t_1\"\237\001\n\nchildMap_t\022#\n\tcellArray\030\001"
  " \001(\0132\020.map.mapCell_t_2\022\016\n\006subInd\030\002 \001(\005\022\014"
  "\n\004indX\030\003 \001(\005\022\014\n\004indY\030\004 \001(\005\022\017\n\007originX\030\005 "
  "\001(\002\022\017\n\007originY\030\006 \001(\002\022\036\n\005cloud\030\007 \001(\0132\017.ma"
  "p.PointCloud\"4\n\010mapArray\022(\n\017Ptr_childMap"
  "_ts\030\001 \003(\0132\017.map.childMap_tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_map_2eproto_sccs[9] = {
  &scc_info_PointCloud_map_2eproto.base,
  &scc_info_PointType_map_2eproto.base,
  &scc_info_childMap_t_map_2eproto.base,
  &scc_info_fdata4_map_2eproto.base,
  &scc_info_grid_t_map_2eproto.base,
  &scc_info_mapArray_map_2eproto.base,
  &scc_info_mapCell_t_map_2eproto.base,
  &scc_info_mapCell_t_1_map_2eproto.base,
  &scc_info_mapCell_t_2_map_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_2eproto_once;
static bool descriptor_table_map_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_2eproto = {
  &descriptor_table_map_2eproto_initialized, descriptor_table_protodef_map_2eproto, "map.proto", 834,
  &descriptor_table_map_2eproto_once, descriptor_table_map_2eproto_sccs, descriptor_table_map_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_map_2eproto::offsets,
  file_level_metadata_map_2eproto, 9, file_level_enum_descriptors_map_2eproto, file_level_service_descriptors_map_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_map_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_map_2eproto), true);
namespace map {

// ===================================================================

void fdata4::InitAsDefaultInstance() {
}
class fdata4::_Internal {
 public:
};

fdata4::fdata4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.fdata4)
}
fdata4::fdata4(const fdata4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data1_, &from.data1_,
    static_cast<size_t>(reinterpret_cast<char*>(&data4_) -
    reinterpret_cast<char*>(&data1_)) + sizeof(data4_));
  // @@protoc_insertion_point(copy_constructor:map.fdata4)
}

void fdata4::SharedCtor() {
  ::memset(&data1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data4_) -
      reinterpret_cast<char*>(&data1_)) + sizeof(data4_));
}

fdata4::~fdata4() {
  // @@protoc_insertion_point(destructor:map.fdata4)
  SharedDtor();
}

void fdata4::SharedDtor() {
}

void fdata4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fdata4& fdata4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fdata4_map_2eproto.base);
  return *internal_default_instance();
}


void fdata4::Clear() {
// @@protoc_insertion_point(message_clear_start:map.fdata4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data4_) -
      reinterpret_cast<char*>(&data1_)) + sizeof(data4_));
  _internal_metadata_.Clear();
}

const char* fdata4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float data1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          data1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float data2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          data2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float data3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          data3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float data4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          data4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fdata4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.fdata4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float data1 = 1;
  if (!(this->data1() <= 0 && this->data1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_data1(), target);
  }

  // float data2 = 2;
  if (!(this->data2() <= 0 && this->data2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_data2(), target);
  }

  // float data3 = 3;
  if (!(this->data3() <= 0 && this->data3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_data3(), target);
  }

  // float data4 = 4;
  if (!(this->data4() <= 0 && this->data4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_data4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.fdata4)
  return target;
}

size_t fdata4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.fdata4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float data1 = 1;
  if (!(this->data1() <= 0 && this->data1() >= 0)) {
    total_size += 1 + 4;
  }

  // float data2 = 2;
  if (!(this->data2() <= 0 && this->data2() >= 0)) {
    total_size += 1 + 4;
  }

  // float data3 = 3;
  if (!(this->data3() <= 0 && this->data3() >= 0)) {
    total_size += 1 + 4;
  }

  // float data4 = 4;
  if (!(this->data4() <= 0 && this->data4() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fdata4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.fdata4)
  GOOGLE_DCHECK_NE(&from, this);
  const fdata4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fdata4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.fdata4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.fdata4)
    MergeFrom(*source);
  }
}

void fdata4::MergeFrom(const fdata4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.fdata4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.data1() <= 0 && from.data1() >= 0)) {
    _internal_set_data1(from._internal_data1());
  }
  if (!(from.data2() <= 0 && from.data2() >= 0)) {
    _internal_set_data2(from._internal_data2());
  }
  if (!(from.data3() <= 0 && from.data3() >= 0)) {
    _internal_set_data3(from._internal_data3());
  }
  if (!(from.data4() <= 0 && from.data4() >= 0)) {
    _internal_set_data4(from._internal_data4());
  }
}

void fdata4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.fdata4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fdata4::CopyFrom(const fdata4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.fdata4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fdata4::IsInitialized() const {
  return true;
}

void fdata4::InternalSwap(fdata4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data1_, other->data1_);
  swap(data2_, other->data2_);
  swap(data3_, other->data3_);
  swap(data4_, other->data4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fdata4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointType::InitAsDefaultInstance() {
}
class PointType::_Internal {
 public:
};

PointType::PointType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.PointType)
}
PointType::PointType(const PointType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
    reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
  // @@protoc_insertion_point(copy_constructor:map.PointType)
}

void PointType::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
}

PointType::~PointType() {
  // @@protoc_insertion_point(destructor:map.PointType)
  SharedDtor();
}

void PointType::SharedDtor() {
}

void PointType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointType& PointType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointType_map_2eproto.base);
  return *internal_default_instance();
}


void PointType::Clear() {
// @@protoc_insertion_point(message_clear_start:map.PointType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&x_)) + sizeof(intensity_));
  _internal_metadata_.Clear();
}

const char* PointType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float intensity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.PointType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float intensity = 4;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_intensity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.PointType)
  return target;
}

size_t PointType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.PointType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float intensity = 4;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.PointType)
  GOOGLE_DCHECK_NE(&from, this);
  const PointType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.PointType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.PointType)
    MergeFrom(*source);
  }
}

void PointType::MergeFrom(const PointType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.PointType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    _internal_set_intensity(from._internal_intensity());
  }
}

void PointType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.PointType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointType::CopyFrom(const PointType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.PointType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointType::IsInitialized() const {
  return true;
}

void PointType::InternalSwap(PointType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(intensity_, other->intensity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointCloud::InitAsDefaultInstance() {
}
class PointCloud::_Internal {
 public:
};

PointCloud::PointCloud()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:map.PointCloud)
}

void PointCloud::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PointCloud_map_2eproto.base);
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:map.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
}

void PointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointCloud& PointCloud::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointCloud_map_2eproto.base);
  return *internal_default_instance();
}


void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:map.PointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _internal_metadata_.Clear();
}

const char* PointCloud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .map.PointType point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointCloud::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.PointCloud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .map.PointType point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.PointCloud)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .map.PointType point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointCloud::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloud* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointCloud>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.PointCloud)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void PointCloud::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  point_.InternalSwap(&other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloud::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void grid_t::InitAsDefaultInstance() {
}
class grid_t::_Internal {
 public:
};

grid_t::grid_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.grid_t)
}
grid_t::grid_t(const grid_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gridindex_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(gridindex_));
  // @@protoc_insertion_point(copy_constructor:map.grid_t)
}

void grid_t::SharedCtor() {
  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gridindex_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(gridindex_));
}

grid_t::~grid_t() {
  // @@protoc_insertion_point(destructor:map.grid_t)
  SharedDtor();
}

void grid_t::SharedDtor() {
}

void grid_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const grid_t& grid_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_grid_t_map_2eproto.base);
  return *internal_default_instance();
}


void grid_t::Clear() {
// @@protoc_insertion_point(message_clear_start:map.grid_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gridindex_) -
      reinterpret_cast<char*>(&mapid_)) + sizeof(gridindex_));
  _internal_metadata_.Clear();
}

const char* grid_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cubeX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cubex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cubeY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cubey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gridX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gridY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gridy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gridIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gridindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* grid_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.grid_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // int32 cubeX = 2;
  if (this->cubex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cubex(), target);
  }

  // int32 cubeY = 3;
  if (this->cubey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cubey(), target);
  }

  // int32 gridX = 4;
  if (this->gridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gridx(), target);
  }

  // int32 gridY = 5;
  if (this->gridy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_gridy(), target);
  }

  // int32 gridIndex = 6;
  if (this->gridindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gridindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.grid_t)
  return target;
}

size_t grid_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.grid_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mapID = 1;
  if (this->mapid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mapid());
  }

  // int32 cubeX = 2;
  if (this->cubex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cubex());
  }

  // int32 cubeY = 3;
  if (this->cubey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cubey());
  }

  // int32 gridX = 4;
  if (this->gridx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gridx());
  }

  // int32 gridY = 5;
  if (this->gridy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gridy());
  }

  // int32 gridIndex = 6;
  if (this->gridindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gridindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void grid_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.grid_t)
  GOOGLE_DCHECK_NE(&from, this);
  const grid_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<grid_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.grid_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.grid_t)
    MergeFrom(*source);
  }
}

void grid_t::MergeFrom(const grid_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.grid_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from.cubex() != 0) {
    _internal_set_cubex(from._internal_cubex());
  }
  if (from.cubey() != 0) {
    _internal_set_cubey(from._internal_cubey());
  }
  if (from.gridx() != 0) {
    _internal_set_gridx(from._internal_gridx());
  }
  if (from.gridy() != 0) {
    _internal_set_gridy(from._internal_gridy());
  }
  if (from.gridindex() != 0) {
    _internal_set_gridindex(from._internal_gridindex());
  }
}

void grid_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.grid_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grid_t::CopyFrom(const grid_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.grid_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grid_t::IsInitialized() const {
  return true;
}

void grid_t::InternalSwap(grid_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mapid_, other->mapid_);
  swap(cubex_, other->cubex_);
  swap(cubey_, other->cubey_);
  swap(gridx_, other->gridx_);
  swap(gridy_, other->gridy_);
  swap(gridindex_, other->gridindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata grid_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mapCell_t::InitAsDefaultInstance() {
  ::map::_mapCell_t_default_instance_._instance.get_mutable()->ptr_xyz_ = const_cast< ::map::PointType*>(
      ::map::PointType::internal_default_instance());
  ::map::_mapCell_t_default_instance_._instance.get_mutable()->grid_ = const_cast< ::map::grid_t*>(
      ::map::grid_t::internal_default_instance());
}
class mapCell_t::_Internal {
 public:
  static const ::map::PointType& ptr_xyz(const mapCell_t* msg);
  static const ::map::grid_t& grid(const mapCell_t* msg);
};

const ::map::PointType&
mapCell_t::_Internal::ptr_xyz(const mapCell_t* msg) {
  return *msg->ptr_xyz_;
}
const ::map::grid_t&
mapCell_t::_Internal::grid(const mapCell_t* msg) {
  return *msg->grid_;
}
mapCell_t::mapCell_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.mapCell_t)
}
mapCell_t::mapCell_t(const mapCell_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ptr_xyz()) {
    ptr_xyz_ = new ::map::PointType(*from.ptr_xyz_);
  } else {
    ptr_xyz_ = nullptr;
  }
  if (from._internal_has_grid()) {
    grid_ = new ::map::grid_t(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  ::memcpy(&log_odds_, &from.log_odds_,
    static_cast<size_t>(reinterpret_cast<char*>(&elevationvar_) -
    reinterpret_cast<char*>(&log_odds_)) + sizeof(elevationvar_));
  // @@protoc_insertion_point(copy_constructor:map.mapCell_t)
}

void mapCell_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mapCell_t_map_2eproto.base);
  ::memset(&ptr_xyz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elevationvar_) -
      reinterpret_cast<char*>(&ptr_xyz_)) + sizeof(elevationvar_));
}

mapCell_t::~mapCell_t() {
  // @@protoc_insertion_point(destructor:map.mapCell_t)
  SharedDtor();
}

void mapCell_t::SharedDtor() {
  if (this != internal_default_instance()) delete ptr_xyz_;
  if (this != internal_default_instance()) delete grid_;
}

void mapCell_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mapCell_t& mapCell_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mapCell_t_map_2eproto.base);
  return *internal_default_instance();
}


void mapCell_t::Clear() {
// @@protoc_insertion_point(message_clear_start:map.mapCell_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ptr_xyz_ != nullptr) {
    delete ptr_xyz_;
  }
  ptr_xyz_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  ::memset(&log_odds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elevationvar_) -
      reinterpret_cast<char*>(&log_odds_)) + sizeof(elevationvar_));
  _internal_metadata_.Clear();
}

const char* mapCell_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .map.PointType Ptr_xyz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptr_xyz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .map.grid_t grid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float log_odds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          log_odds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 observeTimes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          observetimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float occupancy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          occupancy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float occupancyVar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          occupancyvar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float elevation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float elevationVar = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          elevationvar_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapCell_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.mapCell_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .map.PointType Ptr_xyz = 1;
  if (this->has_ptr_xyz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ptr_xyz(this), target, stream);
  }

  // .map.grid_t grid = 2;
  if (this->has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::grid(this), target, stream);
  }

  // float log_odds = 3;
  if (!(this->log_odds() <= 0 && this->log_odds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_log_odds(), target);
  }

  // int32 observeTimes = 4;
  if (this->observetimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_observetimes(), target);
  }

  // float occupancy = 5;
  if (!(this->occupancy() <= 0 && this->occupancy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_occupancy(), target);
  }

  // float occupancyVar = 6;
  if (!(this->occupancyvar() <= 0 && this->occupancyvar() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_occupancyvar(), target);
  }

  // float elevation = 7;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_elevation(), target);
  }

  // float elevationVar = 8;
  if (!(this->elevationvar() <= 0 && this->elevationvar() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_elevationvar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.mapCell_t)
  return target;
}

size_t mapCell_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.mapCell_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .map.PointType Ptr_xyz = 1;
  if (this->has_ptr_xyz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptr_xyz_);
  }

  // .map.grid_t grid = 2;
  if (this->has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  // float log_odds = 3;
  if (!(this->log_odds() <= 0 && this->log_odds() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 observeTimes = 4;
  if (this->observetimes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_observetimes());
  }

  // float occupancy = 5;
  if (!(this->occupancy() <= 0 && this->occupancy() >= 0)) {
    total_size += 1 + 4;
  }

  // float occupancyVar = 6;
  if (!(this->occupancyvar() <= 0 && this->occupancyvar() >= 0)) {
    total_size += 1 + 4;
  }

  // float elevation = 7;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    total_size += 1 + 4;
  }

  // float elevationVar = 8;
  if (!(this->elevationvar() <= 0 && this->elevationvar() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mapCell_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.mapCell_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mapCell_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mapCell_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.mapCell_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.mapCell_t)
    MergeFrom(*source);
  }
}

void mapCell_t::MergeFrom(const mapCell_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.mapCell_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptr_xyz()) {
    _internal_mutable_ptr_xyz()->::map::PointType::MergeFrom(from._internal_ptr_xyz());
  }
  if (from.has_grid()) {
    _internal_mutable_grid()->::map::grid_t::MergeFrom(from._internal_grid());
  }
  if (!(from.log_odds() <= 0 && from.log_odds() >= 0)) {
    _internal_set_log_odds(from._internal_log_odds());
  }
  if (from.observetimes() != 0) {
    _internal_set_observetimes(from._internal_observetimes());
  }
  if (!(from.occupancy() <= 0 && from.occupancy() >= 0)) {
    _internal_set_occupancy(from._internal_occupancy());
  }
  if (!(from.occupancyvar() <= 0 && from.occupancyvar() >= 0)) {
    _internal_set_occupancyvar(from._internal_occupancyvar());
  }
  if (!(from.elevation() <= 0 && from.elevation() >= 0)) {
    _internal_set_elevation(from._internal_elevation());
  }
  if (!(from.elevationvar() <= 0 && from.elevationvar() >= 0)) {
    _internal_set_elevationvar(from._internal_elevationvar());
  }
}

void mapCell_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.mapCell_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapCell_t::CopyFrom(const mapCell_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.mapCell_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapCell_t::IsInitialized() const {
  return true;
}

void mapCell_t::InternalSwap(mapCell_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ptr_xyz_, other->ptr_xyz_);
  swap(grid_, other->grid_);
  swap(log_odds_, other->log_odds_);
  swap(observetimes_, other->observetimes_);
  swap(occupancy_, other->occupancy_);
  swap(occupancyvar_, other->occupancyvar_);
  swap(elevation_, other->elevation_);
  swap(elevationvar_, other->elevationvar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mapCell_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mapCell_t_1::InitAsDefaultInstance() {
}
class mapCell_t_1::_Internal {
 public:
};

mapCell_t_1::mapCell_t_1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.mapCell_t_1)
}
mapCell_t_1::mapCell_t_1(const mapCell_t_1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ptr_mapcell_t_1_(from.ptr_mapcell_t_1_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:map.mapCell_t_1)
}

void mapCell_t_1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mapCell_t_1_map_2eproto.base);
}

mapCell_t_1::~mapCell_t_1() {
  // @@protoc_insertion_point(destructor:map.mapCell_t_1)
  SharedDtor();
}

void mapCell_t_1::SharedDtor() {
}

void mapCell_t_1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mapCell_t_1& mapCell_t_1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mapCell_t_1_map_2eproto.base);
  return *internal_default_instance();
}


void mapCell_t_1::Clear() {
// @@protoc_insertion_point(message_clear_start:map.mapCell_t_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptr_mapcell_t_1_.Clear();
  _internal_metadata_.Clear();
}

const char* mapCell_t_1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .map.mapCell_t Ptr_mapCell_t_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ptr_mapcell_t_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapCell_t_1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.mapCell_t_1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .map.mapCell_t Ptr_mapCell_t_1 = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptr_mapcell_t_1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ptr_mapcell_t_1(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.mapCell_t_1)
  return target;
}

size_t mapCell_t_1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.mapCell_t_1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .map.mapCell_t Ptr_mapCell_t_1 = 1;
  total_size += 1UL * this->_internal_ptr_mapcell_t_1_size();
  for (const auto& msg : this->ptr_mapcell_t_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mapCell_t_1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.mapCell_t_1)
  GOOGLE_DCHECK_NE(&from, this);
  const mapCell_t_1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mapCell_t_1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.mapCell_t_1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.mapCell_t_1)
    MergeFrom(*source);
  }
}

void mapCell_t_1::MergeFrom(const mapCell_t_1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.mapCell_t_1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptr_mapcell_t_1_.MergeFrom(from.ptr_mapcell_t_1_);
}

void mapCell_t_1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.mapCell_t_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapCell_t_1::CopyFrom(const mapCell_t_1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.mapCell_t_1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapCell_t_1::IsInitialized() const {
  return true;
}

void mapCell_t_1::InternalSwap(mapCell_t_1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ptr_mapcell_t_1_.InternalSwap(&other->ptr_mapcell_t_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mapCell_t_1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mapCell_t_2::InitAsDefaultInstance() {
}
class mapCell_t_2::_Internal {
 public:
};

mapCell_t_2::mapCell_t_2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.mapCell_t_2)
}
mapCell_t_2::mapCell_t_2(const mapCell_t_2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ptr_mapcell_t_2_(from.ptr_mapcell_t_2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:map.mapCell_t_2)
}

void mapCell_t_2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mapCell_t_2_map_2eproto.base);
}

mapCell_t_2::~mapCell_t_2() {
  // @@protoc_insertion_point(destructor:map.mapCell_t_2)
  SharedDtor();
}

void mapCell_t_2::SharedDtor() {
}

void mapCell_t_2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mapCell_t_2& mapCell_t_2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mapCell_t_2_map_2eproto.base);
  return *internal_default_instance();
}


void mapCell_t_2::Clear() {
// @@protoc_insertion_point(message_clear_start:map.mapCell_t_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptr_mapcell_t_2_.Clear();
  _internal_metadata_.Clear();
}

const char* mapCell_t_2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .map.mapCell_t_1 Ptr_mapCell_t_2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ptr_mapcell_t_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapCell_t_2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.mapCell_t_2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .map.mapCell_t_1 Ptr_mapCell_t_2 = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptr_mapcell_t_2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ptr_mapcell_t_2(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.mapCell_t_2)
  return target;
}

size_t mapCell_t_2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.mapCell_t_2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .map.mapCell_t_1 Ptr_mapCell_t_2 = 1;
  total_size += 1UL * this->_internal_ptr_mapcell_t_2_size();
  for (const auto& msg : this->ptr_mapcell_t_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mapCell_t_2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.mapCell_t_2)
  GOOGLE_DCHECK_NE(&from, this);
  const mapCell_t_2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mapCell_t_2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.mapCell_t_2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.mapCell_t_2)
    MergeFrom(*source);
  }
}

void mapCell_t_2::MergeFrom(const mapCell_t_2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.mapCell_t_2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptr_mapcell_t_2_.MergeFrom(from.ptr_mapcell_t_2_);
}

void mapCell_t_2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.mapCell_t_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapCell_t_2::CopyFrom(const mapCell_t_2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.mapCell_t_2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapCell_t_2::IsInitialized() const {
  return true;
}

void mapCell_t_2::InternalSwap(mapCell_t_2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ptr_mapcell_t_2_.InternalSwap(&other->ptr_mapcell_t_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mapCell_t_2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void childMap_t::InitAsDefaultInstance() {
  ::map::_childMap_t_default_instance_._instance.get_mutable()->cellarray_ = const_cast< ::map::mapCell_t_2*>(
      ::map::mapCell_t_2::internal_default_instance());
  ::map::_childMap_t_default_instance_._instance.get_mutable()->cloud_ = const_cast< ::map::PointCloud*>(
      ::map::PointCloud::internal_default_instance());
}
class childMap_t::_Internal {
 public:
  static const ::map::mapCell_t_2& cellarray(const childMap_t* msg);
  static const ::map::PointCloud& cloud(const childMap_t* msg);
};

const ::map::mapCell_t_2&
childMap_t::_Internal::cellarray(const childMap_t* msg) {
  return *msg->cellarray_;
}
const ::map::PointCloud&
childMap_t::_Internal::cloud(const childMap_t* msg) {
  return *msg->cloud_;
}
childMap_t::childMap_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.childMap_t)
}
childMap_t::childMap_t(const childMap_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_cellarray()) {
    cellarray_ = new ::map::mapCell_t_2(*from.cellarray_);
  } else {
    cellarray_ = nullptr;
  }
  if (from._internal_has_cloud()) {
    cloud_ = new ::map::PointCloud(*from.cloud_);
  } else {
    cloud_ = nullptr;
  }
  ::memcpy(&subind_, &from.subind_,
    static_cast<size_t>(reinterpret_cast<char*>(&originy_) -
    reinterpret_cast<char*>(&subind_)) + sizeof(originy_));
  // @@protoc_insertion_point(copy_constructor:map.childMap_t)
}

void childMap_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_childMap_t_map_2eproto.base);
  ::memset(&cellarray_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&originy_) -
      reinterpret_cast<char*>(&cellarray_)) + sizeof(originy_));
}

childMap_t::~childMap_t() {
  // @@protoc_insertion_point(destructor:map.childMap_t)
  SharedDtor();
}

void childMap_t::SharedDtor() {
  if (this != internal_default_instance()) delete cellarray_;
  if (this != internal_default_instance()) delete cloud_;
}

void childMap_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const childMap_t& childMap_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_childMap_t_map_2eproto.base);
  return *internal_default_instance();
}


void childMap_t::Clear() {
// @@protoc_insertion_point(message_clear_start:map.childMap_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cellarray_ != nullptr) {
    delete cellarray_;
  }
  cellarray_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cloud_ != nullptr) {
    delete cloud_;
  }
  cloud_ = nullptr;
  ::memset(&subind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&originy_) -
      reinterpret_cast<char*>(&subind_)) + sizeof(originy_));
  _internal_metadata_.Clear();
}

const char* childMap_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .map.mapCell_t_2 cellArray = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellarray(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subInd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          subind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 indX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          indx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 indY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          indy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float originX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          originx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float originY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          originy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .map.PointCloud cloud = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* childMap_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.childMap_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .map.mapCell_t_2 cellArray = 1;
  if (this->has_cellarray()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cellarray(this), target, stream);
  }

  // int32 subInd = 2;
  if (this->subind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_subind(), target);
  }

  // int32 indX = 3;
  if (this->indx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_indx(), target);
  }

  // int32 indY = 4;
  if (this->indy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_indy(), target);
  }

  // float originX = 5;
  if (!(this->originx() <= 0 && this->originx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_originx(), target);
  }

  // float originY = 6;
  if (!(this->originy() <= 0 && this->originy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_originy(), target);
  }

  // .map.PointCloud cloud = 7;
  if (this->has_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cloud(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.childMap_t)
  return target;
}

size_t childMap_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.childMap_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .map.mapCell_t_2 cellArray = 1;
  if (this->has_cellarray()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellarray_);
  }

  // .map.PointCloud cloud = 7;
  if (this->has_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloud_);
  }

  // int32 subInd = 2;
  if (this->subind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subind());
  }

  // int32 indX = 3;
  if (this->indx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_indx());
  }

  // int32 indY = 4;
  if (this->indy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_indy());
  }

  // float originX = 5;
  if (!(this->originx() <= 0 && this->originx() >= 0)) {
    total_size += 1 + 4;
  }

  // float originY = 6;
  if (!(this->originy() <= 0 && this->originy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void childMap_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.childMap_t)
  GOOGLE_DCHECK_NE(&from, this);
  const childMap_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<childMap_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.childMap_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.childMap_t)
    MergeFrom(*source);
  }
}

void childMap_t::MergeFrom(const childMap_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.childMap_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cellarray()) {
    _internal_mutable_cellarray()->::map::mapCell_t_2::MergeFrom(from._internal_cellarray());
  }
  if (from.has_cloud()) {
    _internal_mutable_cloud()->::map::PointCloud::MergeFrom(from._internal_cloud());
  }
  if (from.subind() != 0) {
    _internal_set_subind(from._internal_subind());
  }
  if (from.indx() != 0) {
    _internal_set_indx(from._internal_indx());
  }
  if (from.indy() != 0) {
    _internal_set_indy(from._internal_indy());
  }
  if (!(from.originx() <= 0 && from.originx() >= 0)) {
    _internal_set_originx(from._internal_originx());
  }
  if (!(from.originy() <= 0 && from.originy() >= 0)) {
    _internal_set_originy(from._internal_originy());
  }
}

void childMap_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.childMap_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void childMap_t::CopyFrom(const childMap_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.childMap_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool childMap_t::IsInitialized() const {
  return true;
}

void childMap_t::InternalSwap(childMap_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cellarray_, other->cellarray_);
  swap(cloud_, other->cloud_);
  swap(subind_, other->subind_);
  swap(indx_, other->indx_);
  swap(indy_, other->indy_);
  swap(originx_, other->originx_);
  swap(originy_, other->originy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata childMap_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mapArray::InitAsDefaultInstance() {
}
class mapArray::_Internal {
 public:
};

mapArray::mapArray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:map.mapArray)
}
mapArray::mapArray(const mapArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ptr_childmap_ts_(from.ptr_childmap_ts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:map.mapArray)
}

void mapArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mapArray_map_2eproto.base);
}

mapArray::~mapArray() {
  // @@protoc_insertion_point(destructor:map.mapArray)
  SharedDtor();
}

void mapArray::SharedDtor() {
}

void mapArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mapArray& mapArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mapArray_map_2eproto.base);
  return *internal_default_instance();
}


void mapArray::Clear() {
// @@protoc_insertion_point(message_clear_start:map.mapArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptr_childmap_ts_.Clear();
  _internal_metadata_.Clear();
}

const char* mapArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .map.childMap_t Ptr_childMap_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ptr_childmap_ts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mapArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:map.mapArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .map.childMap_t Ptr_childMap_ts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptr_childmap_ts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ptr_childmap_ts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:map.mapArray)
  return target;
}

size_t mapArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:map.mapArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .map.childMap_t Ptr_childMap_ts = 1;
  total_size += 1UL * this->_internal_ptr_childmap_ts_size();
  for (const auto& msg : this->ptr_childmap_ts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mapArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:map.mapArray)
  GOOGLE_DCHECK_NE(&from, this);
  const mapArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mapArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:map.mapArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:map.mapArray)
    MergeFrom(*source);
  }
}

void mapArray::MergeFrom(const mapArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:map.mapArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptr_childmap_ts_.MergeFrom(from.ptr_childmap_ts_);
}

void mapArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:map.mapArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mapArray::CopyFrom(const mapArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:map.mapArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapArray::IsInitialized() const {
  return true;
}

void mapArray::InternalSwap(mapArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ptr_childmap_ts_.InternalSwap(&other->ptr_childmap_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mapArray::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace map
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::map::fdata4* Arena::CreateMaybeMessage< ::map::fdata4 >(Arena* arena) {
  return Arena::CreateInternal< ::map::fdata4 >(arena);
}
template<> PROTOBUF_NOINLINE ::map::PointType* Arena::CreateMaybeMessage< ::map::PointType >(Arena* arena) {
  return Arena::CreateInternal< ::map::PointType >(arena);
}
template<> PROTOBUF_NOINLINE ::map::PointCloud* Arena::CreateMaybeMessage< ::map::PointCloud >(Arena* arena) {
  return Arena::CreateInternal< ::map::PointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::map::grid_t* Arena::CreateMaybeMessage< ::map::grid_t >(Arena* arena) {
  return Arena::CreateInternal< ::map::grid_t >(arena);
}
template<> PROTOBUF_NOINLINE ::map::mapCell_t* Arena::CreateMaybeMessage< ::map::mapCell_t >(Arena* arena) {
  return Arena::CreateInternal< ::map::mapCell_t >(arena);
}
template<> PROTOBUF_NOINLINE ::map::mapCell_t_1* Arena::CreateMaybeMessage< ::map::mapCell_t_1 >(Arena* arena) {
  return Arena::CreateInternal< ::map::mapCell_t_1 >(arena);
}
template<> PROTOBUF_NOINLINE ::map::mapCell_t_2* Arena::CreateMaybeMessage< ::map::mapCell_t_2 >(Arena* arena) {
  return Arena::CreateInternal< ::map::mapCell_t_2 >(arena);
}
template<> PROTOBUF_NOINLINE ::map::childMap_t* Arena::CreateMaybeMessage< ::map::childMap_t >(Arena* arena) {
  return Arena::CreateInternal< ::map::childMap_t >(arena);
}
template<> PROTOBUF_NOINLINE ::map::mapArray* Arena::CreateMaybeMessage< ::map::mapArray >(Arena* arena) {
  return Arena::CreateInternal< ::map::mapArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
